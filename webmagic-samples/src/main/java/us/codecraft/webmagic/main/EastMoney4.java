package us.codecraft.webmagic.main;

import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.utils.HttpConstant;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ForkJoinPool;

import static java.util.Arrays.*;

//筛选出22天里最近一天最低的非机构持仓的轻度控盘或中度控盘的股票
public class EastMoney4 implements PageProcessor {

    List<String> url2s=new ArrayList<>();

    // 部分一：抓取网站的相关配置，包括编码、抓取间隔、重试次数等
    private Site site = Site.me().setCharset("utf-8").setRetryTimes(3).setSleepTime(1000);

    @Override
    // process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑
    public void process(Page page) {

        String raw = String.valueOf(new JsonPathSelector("$").selectList(page.getRawText()));
        //System.out.println(raw);
        String[] split = raw.split("\\[|\\]");
        String jsonArray="{\"data\":["+split[2].toString()+"]}";
        //System.out.println(jsonArray);

        List<String> sumJGCXD = new ArrayList<>();

        for (int i = 0; i < 22; i++) {



            List<String> strings = new JsonPathSelector("$.data["+i+"].JGCYD").selectList(jsonArray);
            sumJGCXD.addAll(strings);



        }

        String[] split1 = sumJGCXD.toString().split("\\[|\\]")[1].split(",");
        float[] fsplit1=new float[split1.length];
        for (int i = 0; i < split1.length; i++) {
            fsplit1[i]=Float.parseFloat(split1[i]);
        }


        float max=fsplit1[0];//将数组的第一个元素赋给max
        float min=fsplit1[0];//将数组的第一个元素赋给min
        for(int i=1;i<fsplit1.length;i++){//从数组的第二个元素开始赋值，依次比较
            if(fsplit1[i]>max){//如果arr[i]大于最大值，就将arr[i]赋给最大值
                max=fsplit1[i];
            }
            if(fsplit1[i]<min){//如果arr[i]小于最小值，就将arr[i]赋给最小值
                min=fsplit1[i];
            }
        }
        System.out.print(new JsonPathSelector("$.data[0].STOCKNAME").selectList(jsonArray));
        System.out.print(new JsonPathSelector("$.data[0].TRADECODE").selectList(jsonArray));
        if(fsplit1[0]==min){
            System.out.println("今天的最小股票有了！！！");
        }
        if(fsplit1[0]==max){
            System.out.println("今天的最大股票有了！！！");
        }

        


        //沪市A股 1622
        //深市A股 474
        //创业板 932
        //中小板  1012









        }

    @Override
    public Site getSite() {
        return site;
    }

    public static void main(String[] args) {
        Request request = new Request();
        request.setMethod(HttpConstant.Method.GET);

        List<String> l = asList(

                "600037","600053","600055","600071","600077","600129","600136","600143","600158","600206","600255","600260","600305","600316","600335","600340","600348","600363","600369","600379","600392","600397","600410","600418","600426","600448","600470","600478","600505","600509","600510","600520","600525","600572","600573","600579","600604","600636","600644","600648","600655","600703","600708","600727","600737","600738","600796","600797","600810","600812","600822","600825","600839","600851","600869","600893","600895","600917","600918","600982","601058","601068","601187","601330","601360","601369","601399","601456","601515","601519","601689","601798","601865","601878","601901","603016","603026","603066","603078","603085","603105","603116","603138","603156","603159","603177","603185","603187","603188","603189","603208","603309","603328","603335","603351","603355","603466","603488","603528","603533","603598","603606","603629","603637","603656","603665","603685","603716","603717","603733","603803","603823","603887","603893","603929","603931","603978","603987","603992","603999","605008","605151","605303","605358","605376","000012","000027","000032","000034","000046","000153","000402","000420","000504","000546","000565","000593","000596","000635","000665","000692","000701","000712","000716","000727","000818","000828","000830","000839","000887","000903","000909","000913","000927","000953","000960","000997","001696","002004","002006","002010","002022","002030","002045","002062","002075","002094","002096","002098","002114","002117","002123","002127","002132","002146","002149","002156","002181","002190","002194","002198","002206","002242","002249","002255","002265","002271","002285","002312","002314","002315","002333","002364","002373","002387","002409","002421","002425","002451","002455","002472","002489","002506","002514","002530","002534","002553","002554","002589","002598","002605","002614","002615","002625","002660","002681","002685","002724","002740","002747","002751","002758","002769","002781","002805","002819","002837","002838","002842","002891","002895","002907","002910","002923","002937","002943","002970","002978","002982","002998","003001","003003","003022","003025","003030","300036","300056","300069","300077","300096","300123","300147","300157","300158","300167","300191","300205","300221","300234","300243","300266","300270","300279","300286","300287","300309","300340","300371","300397","300477","300489","300519","300526","300537","300541","300542","300546","300547","300582","300588","300604","300614","300615","300624","300649","300655","300671","300713","300715","300729","300731","300767","300811","300831","300848","300853","300872","300884","300925","300945","300959","300982","300998","600006","600063","600070","600081","600105","600119","600121","600156","600173","600178","600189","600212","600213","600223","600234","600284","600295","600318","600328","600331","600367","600459","600536","600539","600543","600577","600590","600620","600639","600663","600712","600713","600722","600732","600771","600773","600775","600821","600834","600836","600848","600864","600905","600956","600965","601066","601101","601339","601666","601788","601995","601996","603001","603022","603106","603109","603126","603214","603353","603383","603396","603603","603611","603655","603661","603690","603726","603759","603806","603839","603867","603888","603897","603901","603927","603963","605099","605189","605299","000009","000037","000066","000159","000415","000526","000545","000560","000592","000652","000697","000700","000711","000766","000803","000815","000848","000911","000925","000948","000959","000962","002011","002046","002054","002091","002108","002158","002169","002201","002227","002238","002240","002261","002279","002291","002306","002319","002342","002354","002369","002400","002411","002417","002445","002459","002471","002474","002512","002527","002564","002566","002580","002585","002591","002613","002616","002621","002626","002636","002642","002667","002670","002676","002688","002701","002703","002709","002712","002717","002723","002765","002773","002795","002802","002869","002890","002898","002901","002902","002931","002956","002957","003007","003026","003028","003031","300079","300108","300162","300204","300220","300223","300268","300345","300598","300663","300996","600076","600080","600088","600096","600103","600123","600152","600155","600171","600185","600211","600227","600250","600281","600321","600354","600355","600381","600389","600405","600460","600499","600526","600546","600559","600587","600613","600630","600698","600714","600779","600793","600818","600844","600860","601038","601156","601579","601919","603069","603169","603222","603297","603348","603389","603486","603536","603608","603650","603722","603777","603778","603822","603876","603906","603918","603998","605136","605179","000532","000676","000679","000838","000868","000892","000893","000920","000949","000983","001896","002055","002077","002103","002137","002154","002173","002174","002178","002235","002290","002365","002379","002416","002516","002532","002617","002647","002658","002756","002835","002892","002893","002906","002940","003016","003029","300153","300264","300608","600243","600292","600307","600338","600439","600530","600726","600992","601699","603059","603083","603399","603657","603836","603900","603912","605055","605108","605199","605305","605369","605488","000422","000620","000722","000762","000790","000890","000929","000978","000993","002121","002136","002247","002326","002341","002407","002502","002721","002738","002763","002824","003027","003036","600137","600197","600704","600759","601005","601258","601999","603035","603168","603178","603316","603538","603787","605319","605388","000004","000409","000625","000650","000655","000683","000829","000966","000982","002172","002386","002536","002547","002612","002728","002881","002885","002908","002922","003039","300339","300966","600007","600200","600610","600684","600725","600733","600751","600814","600889","600960","600963","601015","601567","603511","603615","605098","000158","000908","001205","002168","002284","002435","002570","002786","002997","003020","003041","600095","600327","600423","601969","603025","605080","000615","000718","000793","001206","002346","002348","002426","002646","002759","003032","600257","600744","603020","603196","603630","603933","605186","000995","002289","002316","002490","600172","600735","600753","605300","605337","000408","001203","002248","002679","002862","600238","601127","605117","000150","002418","002581","002762","003040","003043","600032","600702","600906","605086","605196","605378","002622","002900","603721","605016","605339","605499","000572","002269","002280","603518","605089","601279"

        );

























        for (String t:l){
            StringBuilder s=new StringBuilder("http://dcfm.eastmoney.com/em_mutisvcexpandinterface/api/js/get?type=QGQP_LSJGCYD&token=70f12f2f4f091e459a279469fe49eca5&ps=22&filter=(TRADECODE=%27");
            s.append(t);
            s.append("%27)&st=TRADEDATE&sr=-1&callback=jQuery112307965527139220383_1617014060178&_=1617014060179");
            System.out.println(s);
            request.setUrl(s.toString());

            Spider.create(new EastMoney4())
                    //从"https://github.com/code4craft"开始抓
                    .addRequest(request)
                    .addPipeline(new FilePipeline("D:/data"))
                    .addPipeline(new ConsolePipeline())
                    //开启5个线程抓取
                    .thread(20)
                    //启动爬虫
                    .run();

        }
    }
}
